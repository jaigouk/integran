name: Security & Dependency Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Install dependencies
        run: |
          uv venv
          . .venv/bin/activate
          uv pip install -e ".[dev]"
      
      - name: Run security checks with Ruff
        run: |
          . .venv/bin/activate
          # Ruff includes all flake8-bandit security checks (S prefix rules)
          # See: https://docs.astral.sh/ruff/rules/#flake8-bandit-s
          # This checks for:
          # - Hardcoded passwords (S105-S107)
          # - Security issues with pickle, yaml, XML (S301-S321)
          # - Insecure cryptography (S401-S415)
          # - Shell injection risks (S601-S612)
          # - And many more security anti-patterns
          
          # NOTE: We explicitly pass --ignore flags because GitHub Actions
          # may not always pick up the pyproject.toml configuration correctly
          
          # Generate JSON report for artifact upload
          ruff check --select S --ignore S101,S311 --output-format=json > ruff-security-report.json || true
          
          # Run again with human-readable output and fail on issues
          # Note: Ignored rules configured in pyproject.toml:
          # - S101 (assert) is allowed for tests
          # - S311 (random) is allowed for non-cryptographic use (question shuffling)
          # Explicitly pass ignore rules since CI might not pick up pyproject.toml
          ruff check --select S --ignore S101,S311 .
      
      # Option 1: Use Safety with API key (if you have one)
      # Uncomment the following lines and add SAFETY_API_KEY to your GitHub secrets
      # - name: Check for known vulnerabilities with Safety
      #   env:
      #     SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
      #   run: |
      #     . .venv/bin/activate
      #     pip install safety
      #     safety scan
      
      # Option 2: Use pip-audit (no authentication required, recommended)
      - name: Check for known vulnerabilities with pip-audit
        run: |
          . .venv/bin/activate
          pip install pip-audit
          # Run pip-audit to check for known vulnerabilities
          # --desc: Include vulnerability descriptions
          # --fix: Attempt to fix vulnerabilities (dry-run mode)
          # --dry-run: Don't actually fix, just report what would be fixed
          pip-audit --desc --fix --dry-run || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            ruff-security-report.json